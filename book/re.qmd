# Regular Expressions

Regular expressions are a mini language for pattern matching. They are used in searching for patterns of text, replacing a pattern with another etc.

In Python, the built-in module `re` provides support for regular expressions.

## Introduction

Suppose we want to find all the numbers in a sentence.

```{python}
sentence = "10 apples and 20 mangoes"
```

It would be too cumbersome to do that with usual programming techniques.

Let's see how we can do that using regular expressions.

```{python}
import re
```

```{python}
re.findall("\d+", sentence)
```

In the above example, the pattern `\d` matches any digit and `\d+` matches one or more digits. We'll learn more about the syntax of regular expressions in a while.

Suppose we want to mask all the numbers in a sentence.

```{python}
re.sub("\d", "X", sentence)
```

## Syntax

A regular expression can have an ordinary or special characters.


### Rule 1: Oridinary characters match themselves

```{python}
re.match("one", "one thousand phones")
```

```{python}
re.findall("one", "one thousand phones")
```

### Rule 2: Special character `.` matches any character

```{python}
re.match("a.c", "abc")
```

If we want to match a literal ., we need escape it.

```{python}
re.match("a\.b", "axb") # no match
```

```{python}
re.match("a\.b", "a.b") # match
```

### Rule 3: Special character | is used to match either of the two patterns

```{python}
re.match("a|b", "a")
```

```{python}
re.match("a|b", "b")
```


```{python}
re.match("a|b", "c")
```

```{python}
re.findall("apple|mango|banana", "10 apples and 20 mangoes")
```

### Rule 4: A character group

A character group matches any of the characters in thr group.

```{python}
re.match("a[bc]", "ab")
```

```{python}
re.match("a[bc]", "ac")
```

```{python}
re.match("a[bc]", "ad")
```

```{python}
re.findall("a[bc]", "ab ac ad ae")
```

We can also specify a range.

```{python}
re.match("a[0-9]b", "a5b")
```

```{python}
re.match("[a-z][0-9][a-z]", "a5b")
```

We can also negate a character group using `^`.

```{python}
re.findall("[^a-z0-9]", "10 apples and 20 mangoes!! <>")
```

## The Python API

The `re` module provides the following functions to work with regular expressions.

**findall**

Finds all the occurances of a pattern in a string.

```{python}
re.findall("\d+", "10 apples and 20 mangoes")
['10', '20']
```

**match**

Match a regular expression at the beginning of a string.

**search**

**sub**

**split**

**compile**

## Advanced Usage


## Example: Parse git log

## Example: Extract Links

## Problems

**Problem:** Write a function `squeeze` to replace multiple continuous whitespace with a single space.

```
>>> squeeze("a  b    c d")
'a b c d'
```

**Problem:** Write a function `make_slug` that takes title as argument and converts that into a nice name that can be used as part of URL. Make sure the the slug is in lower case.

```
>>> make_slug("Advanced python")
'advanced-python'
>>> make_slug("Hello, World!")
'hello-world'
>>> make_slug("1 + 2 = 3 !")
'1-2-3'
>>> make_slug("https://google.com/")
'https-google-com'
```

Other Problems:
- runlength encoding
